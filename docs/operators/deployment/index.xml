<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Deploying Heron on Heron</title>
    <link>https://apache.github.io/incubator-heron/docs/operators/deployment/</link>
    <description>Recent content in Deploying Heron on Heron</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://apache.github.io/incubator-heron/docs/operators/deployment/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Apache Hadoop YARN Cluster (Experimental)</title>
      <link>https://apache.github.io/incubator-heron/docs/operators/deployment/schedulers/yarn/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://apache.github.io/incubator-heron/docs/operators/deployment/schedulers/yarn/</guid>
      <description>In addition to out-of-the-box schedulers for Aurora, Heron can also be deployed on a YARN cluster with the YARN scheduler. The YARN scheduler is implemented using the Apache REEF framework.
Key features of the YARN scheduler:
 Heterogeneous container allocation: The YARN scheduler will request heterogeneous containers from the YARN ResourceManager RM. In other words the topology will not request more resources than what is really needed.
 Container reuse: The REEF framework allows the YARN scheduler to retain containers across events like topology restarts.</description>
    </item>
    
    <item>
      <title>Aurora Cluster</title>
      <link>https://apache.github.io/incubator-heron/docs/operators/deployment/schedulers/aurora/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://apache.github.io/incubator-heron/docs/operators/deployment/schedulers/aurora/</guid>
      <description>Heron supports deployment on Apache Aurora out of the box. A step by step guide on how to setup Heron with Apache Aurora locally can be found in Setting up Heron with Aurora Cluster Locally on Linux. You can also run Heron on a local scheduler.
How Heron on Aurora Works Aurora doesn&amp;rsquo;t have a Heron scheduler per se. Instead, when a topology is submitted to Heron, heron cli interacts with Aurora to automatically deploy all the components necessary to manage topologies.</description>
    </item>
    
    <item>
      <title>Configuring a Cluster</title>
      <link>https://apache.github.io/incubator-heron/docs/operators/deployment/configuration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://apache.github.io/incubator-heron/docs/operators/deployment/configuration/</guid>
      <description>To setup a Heron cluster, you need to configure a few files. Each file configures a component of the Heron streaming framework.
 scheduler.yaml &amp;mdash; This file specifies the required classes for launcher, scheduler, and for managing the topology at runtime. Any other specific parameters for the scheduler go into this file.
 statemgr.yaml &amp;mdash; This file contains the classes and the configuration for state manager. The state manager maintains the running state of the topology as logical plan, physical plan, scheduler state, and execution state.</description>
    </item>
    
    <item>
      <title>DC/OS Deployments</title>
      <link>https://apache.github.io/incubator-heron/docs/operators/deployment/schedulers/dcos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://apache.github.io/incubator-heron/docs/operators/deployment/schedulers/dcos/</guid>
      <description>Heron supports deployment on DC/OS. Deployments on DC/OS are done via Marathon and Docker. Further command-line support for DC/OS is forthcoming.
How Heron on DC/OS Works Heron with DC/OS works by creating its topology deployments in Marathon under a single group. Note that only the submit and kill Heron CLI commands are currently supported with DC/OS and Marathon.
ZooKeeper To run Heron on DC/OS, you&amp;rsquo;ll need a Zookeeper cluster. In non-production environments you can use the same ZK cluster as the Mesos masters, but this is not recommended for production environments.</description>
    </item>
    
    <item>
      <title>Heron on Kubernetes by hand</title>
      <link>https://apache.github.io/incubator-heron/docs/operators/deployment/schedulers/kubernetes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://apache.github.io/incubator-heron/docs/operators/deployment/schedulers/kubernetes/</guid>
      <description>This document shows you how to install Heron on Kubernetes in a step-by-step, &amp;ldquo;by hand&amp;rdquo; fashion. An easier way to install Heron on Kubernetes is to use the Helm package manager. For instructions on doing so, see Heron on Kubernetes with Helm).
 Heron supports deployment on Kubernetes (sometimes called k8s). Heron deployments on Kubernetes use Docker as the containerization format for Heron topologies and use the Kubernetes API for scheduling.</description>
    </item>
    
    <item>
      <title>Heron on Kubernetes with Helm</title>
      <link>https://apache.github.io/incubator-heron/docs/operators/deployment/schedulers/kubernetes-helm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://apache.github.io/incubator-heron/docs/operators/deployment/schedulers/kubernetes-helm/</guid>
      <description>If you&amp;rsquo;d prefer to install Heron on Kubernetes without using the Helm package manager, see the Heron on Kubernetes by hand document.
 Helm is an open source package manager for Kubernetes that enables you to quickly and easily install even the most complex software systems on Kubernetes. Heron has a Helm chart that you can use to install Heron on Kubernetes using just a few commands. The chart can be used to install Heron on the following platforms:</description>
    </item>
    
    <item>
      <title>Heron standalone</title>
      <link>https://apache.github.io/incubator-heron/docs/operators/deployment/schedulers/standalone/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://apache.github.io/incubator-heron/docs/operators/deployment/schedulers/standalone/</guid>
      <description>Heron enables you to easily run a multi-node cluster in standalone mode. The difference between standalone mode and local mode for Heron is that standalone mode involves running multiple compute nodes&amp;mdash;using Hashicorp&amp;rsquo;s Nomad as a scheduler&amp;mdash;rather than just one.
Installation You can use Heron in standalone mode using the heron-admin CLI tool, which can be installed using the instructions here.
Requirements In order to run Heron in standalone mode, you&amp;rsquo;ll need to run a ZooKeeper cluster.</description>
    </item>
    
    <item>
      <title>Local Cluster</title>
      <link>https://apache.github.io/incubator-heron/docs/operators/deployment/schedulers/local/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://apache.github.io/incubator-heron/docs/operators/deployment/schedulers/local/</guid>
      <description>In addition to out-of-the-box schedulers for Aurora, Heron can also be deployed in a local environment, which stands up a mock Heron cluster on a single machine. This can be useful for experimenting with Heron&amp;rsquo;s features, testing a wide variety of possible cluster events, and so on.
One of two state managers can be used for coordination when deploying locally:
 ZooKeeper Local File System  Note: Deploying a Heron cluster locally is not to be confused with Heron&amp;rsquo;s simulator mode.</description>
    </item>
    
    <item>
      <title>Mesos (Work in Progress)</title>
      <link>https://apache.github.io/incubator-heron/docs/operators/deployment/schedulers/mesos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://apache.github.io/incubator-heron/docs/operators/deployment/schedulers/mesos/</guid>
      <description>Heron supports deployment on Apache Mesos. Heron can also run on Mesos using Apache Aurora as a scheduler or using a local scheduler.
How Heron on Mesos Works Heron&amp;rsquo;s Mesos scheduler interacts with Mesos to stand up all of the components necessary to manage topologies.
ZooKeeper To run Heron on Mesos, you&amp;rsquo;ll need to set up a ZooKeeper cluster and configure Heron to communicate with it. Instructions can be found in Setting up ZooKeeper.</description>
    </item>
    
    <item>
      <title>Nomad</title>
      <link>https://apache.github.io/incubator-heron/docs/operators/deployment/schedulers/nomad/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://apache.github.io/incubator-heron/docs/operators/deployment/schedulers/nomad/</guid>
      <description>Heron supports Hashicorp&amp;rsquo;s Nomad as a scheduler. You can use Nomad for either small- or large-scale Heron deployments or to run Heron locally in standalone mode.
Nomad setup Setting up a nomad cluster will not be covered here. See the official Nomad docs for instructions.
 Heron currently only supports the raw exec driver for Nomad.
 When setting up your Nomad cluster, the following are required:
 The Heron CLI tool must be installed on each machine used to deploy Heron topologies Python 2.</description>
    </item>
    
    <item>
      <title>Setting Up Local File System State Manager</title>
      <link>https://apache.github.io/incubator-heron/docs/operators/deployment/statemanagers/localfs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://apache.github.io/incubator-heron/docs/operators/deployment/statemanagers/localfs/</guid>
      <description>Heron can use the local file system as a state manager for storing various book keeping information. Use of local file system is recommended mainly for single node server and laptop. This configuration is ideal for deploying in edge devices. Heron developers can use this setting for developing and debugging various heron components in their laptop or server.
Local File System State Manager Configuration You can make Heron aware of the ZooKeeper cluster by modifying the statemgr.</description>
    </item>
    
    <item>
      <title>Setting Up ZooKeeper State Manager</title>
      <link>https://apache.github.io/incubator-heron/docs/operators/deployment/statemanagers/zookeeper/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://apache.github.io/incubator-heron/docs/operators/deployment/statemanagers/zookeeper/</guid>
      <description>Heron relies on ZooKeeper for a wide variety of cluster coordination tasks. You can use either a shared or dedicated ZooKeeper cluster.
There are a few things you should be aware of regarding Heron and ZooKeeper:
 Heron uses ZooKeeper only for coordination, not for message passing, which means that ZooKeeper load should generally be fairly low. A single-node and/or shared ZooKeeper may suffice for your Heron cluster, depending on usage.</description>
    </item>
    
    <item>
      <title>Setting up Heron with Aurora Cluster Locally on Linux</title>
      <link>https://apache.github.io/incubator-heron/docs/operators/deployment/schedulers/aurora-local-setup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://apache.github.io/incubator-heron/docs/operators/deployment/schedulers/aurora-local-setup/</guid>
      <description>It is possible to setup Heron with a locally running Apache Aurora cluster. This is a step by step guide on how to configure and setup all the necessary components.
Setting Up Apache Aurora Cluster locally You first need to setup Apache Aurora locally. More detailed description of the following steps can be found in A local Cluster with Vagrant
Step 1: Install VirtualBox and Vagrant Download and install VirtualBox and Vagrant on your machine.</description>
    </item>
    
    <item>
      <title>Setting up Heron with Mesos Cluster Locally on Mac</title>
      <link>https://apache.github.io/incubator-heron/docs/operators/deployment/schedulers/mesos-local-mac/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://apache.github.io/incubator-heron/docs/operators/deployment/schedulers/mesos-local-mac/</guid>
      <description>This is a step by step guide to run Heron on a Mesos cluster locally.
Install Heron Follow Quick Start Guide to install Heron.
Setting up an Apache Mesos Cluster Locally Follow Installing Mesos on your Mac with Homebrew to install and run Mesos. To confirm Mesos cluster is ready for accepting Heron topologies, access the Mesos management console http://localhost:5050 and confirm there is activated slaves.
Configure Heron State Manager By default, Heron uses Local File System State Manager on Mesos to manage states.</description>
    </item>
    
    <item>
      <title>Slurm Cluster (Experimental)</title>
      <link>https://apache.github.io/incubator-heron/docs/operators/deployment/schedulers/slurm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://apache.github.io/incubator-heron/docs/operators/deployment/schedulers/slurm/</guid>
      <description>In addition to out-of-the-box scheduler for Aurora, Heron can also be deployed in a HPC cluster with the Slurm Scheduler. This allows a researcher to deploy Heron and execute streaming scientific work-flows.
How Slurm Deployment Works Using the Slurm scheduler is similar to deploying Heron on other systems. The Heron (../../heron-cli) cli is used to deploy and manage topologies similar to other schedulers. The main difference is in the configuration.</description>
    </item>
    
  </channel>
</rss>