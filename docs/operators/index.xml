<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Operators on Heron</title>
    <link>https://apache.github.io/incubator-heron/docs/operators/</link>
    <description>Recent content in Operators on Heron</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://apache.github.io/incubator-heron/docs/operators/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Heron Explorer</title>
      <link>https://apache.github.io/incubator-heron/docs/operators/heron-explorer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://apache.github.io/incubator-heron/docs/operators/heron-explorer/</guid>
      <description>The Heron Explorer is a CLI tool that you can use to gain insight into a Heron installation, including:
 which clusters are currently running in the installation information about a given topology&amp;rsquo;s components (spouts and bolts) metrics for a topology the containers in which a topology is running the topologies running in a given cluster, role, or environment   The Heron Explorer vs. Heron CLI There are two important differences between the Heron Explorer and Heron CLI.</description>
    </item>
    
    <item>
      <title>Heron Instance</title>
      <link>https://apache.github.io/incubator-heron/docs/operators/configuration/instance/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://apache.github.io/incubator-heron/docs/operators/configuration/instance/</guid>
      <description>You can configure the behavior of the Heron Instances (HIs) in a topology using the parameters below.
Internal Configuration These parameters deal with the TCP write and read queue for each instance.
   Parameter Meaning Default     heron.instance.internal.bolt.read.queue.capacity The queue capacity (number of items) in bolt for buffer packets to read from stream manager 128   heron.instance.internal.bolt.write.queue.capacity The queue capacity (number of items) in bolt for buffer packets to write to stream manager 128   heron.</description>
    </item>
    
    <item>
      <title>Heron Shell</title>
      <link>https://apache.github.io/incubator-heron/docs/operators/heron-shell/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://apache.github.io/incubator-heron/docs/operators/heron-shell/</guid>
      <description>Heron shell helps debugging a heron topology. It is an HTTP server that runs as a separate process in every container. It exposes many utilities through REST APIs. These utilities are described below in more details.
The port to connect to heron shell for each container is stored in the physical plan. Heron tracker picks up this port and connects to shell. See the next section for more details.</description>
    </item>
    
    <item>
      <title>Heron Tracker</title>
      <link>https://apache.github.io/incubator-heron/docs/operators/heron-tracker/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://apache.github.io/incubator-heron/docs/operators/heron-tracker/</guid>
      <description>Heron Tracker is a web service that continuously gathers a wide variety of information about Heron topologies and exposes that information through a JSON REST API. More on the role of the Tracker can be found here.
Building Heron Tracker Heron uses bazel for compiling. Compiling describes how to setup bazel for heron.
# Build heron-tracker $ bazel build heron/tools/tracker/src/python:heron-tracker # The location of heron-tracker pex executable is # bazel-bin/heron/tools/tracker/src/python/heron-tracker # To run using default options: $ .</description>
    </item>
    
    <item>
      <title>Heron Tracker REST API</title>
      <link>https://apache.github.io/incubator-heron/docs/operators/heron-tracker-api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://apache.github.io/incubator-heron/docs/operators/heron-tracker-api/</guid>
      <description>JSON Interface All Heron Tracker endpoints return a JSON object with the following information:
 status &amp;mdash; One of the following: success, failure. executiontime &amp;mdash; The time taken to return the HTTP result, in seconds. message &amp;mdash; Some endpoints return special messages in this field for certain requests. Often, this field will be an empty string. A failure status will always have a message. result &amp;mdash; The result payload of the request.</description>
    </item>
    
    <item>
      <title>Heron UI</title>
      <link>https://apache.github.io/incubator-heron/docs/operators/heron-ui/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://apache.github.io/incubator-heron/docs/operators/heron-ui/</guid>
      <description>Heron UI is a user interface that uses the Heron Tracker to display detailed, colorful visual representations of topologies, including the logical and physical plan for each topology. Check out Heron UI Usage Guide for more information about various elements that UI exposes.
Building Heron UI Heron uses bazel for compiling. This page describes how to setup bazel for heron.
# Build heron-ui $ bazel build heron/tools/ui/src/python:heron-ui # The location of heron-ui pex executable is # bazel-bin/heron/tools/ui/src/python/heron-ui # To run using default options: $ .</description>
    </item>
    
    <item>
      <title>Intro to Heron Cluster Configuration</title>
      <link>https://apache.github.io/incubator-heron/docs/operators/configuration/config-intro/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://apache.github.io/incubator-heron/docs/operators/configuration/config-intro/</guid>
      <description>Heron clusters can be configured at two levels:
 The system level &amp;mdash; System-level configurations apply to the whole Heron cluster rather than to any specific component (e.g. logging configurations). The component level &amp;mdash; Component-level configurations enable you to establish default configurations for different components. These configurations are fixed at any stage of the topology&amp;rsquo;s lifecycle, once the topology is deployed.  Neither system- nor component-level configurations can be overridden by topology developers.</description>
    </item>
    
    <item>
      <title>Managing Topologies with Heron CLI</title>
      <link>https://apache.github.io/incubator-heron/docs/operators/heron-cli/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://apache.github.io/incubator-heron/docs/operators/heron-cli/</guid>
      <description>The Heron CLI us used to to manage every aspect of the topology lifecycle.
Deploying the heron CLI Executable To use heron CLI, download the heron-client-install for your platfrom from release binaries and run the installation script. For example, if you have downloaded the version 0.13.5, you invoke the installation script as follows:
$ chmod +x heron-client-install-0.13.5-darwin.sh $ ./heron-client-install-0.13.5-darwin.sh --user Heron client installer ---------------------- Uncompressing...... Heron is now installed! Make sure you have &amp;#34;/Users/$USER/bin&amp;#34; in your path.</description>
    </item>
    
    <item>
      <title>Metrics Manager</title>
      <link>https://apache.github.io/incubator-heron/docs/operators/configuration/metrics-manager/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://apache.github.io/incubator-heron/docs/operators/configuration/metrics-manager/</guid>
      <description>You can configure all of the Metrics Managers (MMs) in a topology using the parameters below.
Network Configuration You can configure how the MM collects and transmits data in one (but only one) of two ways: time based or size based. If you choose time based, you can specify the maximum batch time (in milliseconds) for reading from and writing to the MM&amp;rsquo;s socket; if you choose size based, you can specify maximum batch sizes (in bytes) instead.</description>
    </item>
    
    <item>
      <title>Stream Manager</title>
      <link>https://apache.github.io/incubator-heron/docs/operators/configuration/stmgr/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://apache.github.io/incubator-heron/docs/operators/configuration/stmgr/</guid>
      <description>You can configure the Stream Manager (SM) in a topology using the parameters below, including how the SM handles back pressure.
Back Pressure Parameters    Parameter Meaning Default     heron.streammgr.network.backpressure.threshold The number of times the SM should wait to see a buffer full while enqueueing data before declaring the start of backpressure 3   heron.streammgr.network.backpressure.highwatermark.mb The high water mark on the number of megabytes that can be left outstanding on a connection 50   heron.</description>
    </item>
    
    <item>
      <title>System-level Configuration</title>
      <link>https://apache.github.io/incubator-heron/docs/operators/configuration/system/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://apache.github.io/incubator-heron/docs/operators/configuration/system/</guid>
      <description>The parameters in the sections below are set at the system level and thus do not apply to any specific component.
General    Config Meaning Default     heron.check.tmaster.location.interval.sec The interval, in seconds, after which to check if the topology master location has been fetched or not 120   heron.metrics.export.interval The interval, in seconds, at which components export metrics to the topology&amp;rsquo;s Metrics Manager     Logging    Config Meaning Default     heron.</description>
    </item>
    
    <item>
      <title>The Heron API server</title>
      <link>https://apache.github.io/incubator-heron/docs/operators/heron-api-server/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://apache.github.io/incubator-heron/docs/operators/heron-api-server/</guid>
      <description>The Heron API server is a necessary component
 If you&amp;rsquo;re running Heron locally on your laptop, you won&amp;rsquo;t need to run the Heron API server separately; its functions will be handled automatically.
 Installation The Heron API server executable (heron-apiserver) is installed automatically when you install the Heron tools.
Running the Heron API server You can start up the Heron API server using the heron-apiserver command. When you do so you&amp;rsquo;ll need to specify two things:</description>
    </item>
    
    <item>
      <title>Topology Master</title>
      <link>https://apache.github.io/incubator-heron/docs/operators/configuration/tmaster/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://apache.github.io/incubator-heron/docs/operators/configuration/tmaster/</guid>
      <description>You can configure the Topology Master &amp;trade; for a topology using the parameters below.
   Parameter Meaning Default     heron.tmaster.metrics.collector.maximum.interval.min The maximum interval, in minutes, for metrics to be kept in the Topology Master 180   heron.tmaster.establish.retry.times The maximum time to retry to establish the Topology Master 30   heron.tmaster.establish.retry.interval.sec The interval to retry to establish the Topology Master 1   heron.tmaster.network.master.options.maximum.packet.mb The maximum packet size, in megabytes, of the Topology Master&amp;rsquo;s network options for Stream Managers to connect to 16   heron.</description>
    </item>
    
  </channel>
</rss>